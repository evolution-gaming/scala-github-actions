name: test and publish new release

on:
  workflow_call:
    secrets:
      JFROG_ACCESS_TOKEN:
        required: true

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  publish-release:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: check if tag matches with version in `version.sbt`
        run: |
          tag=${{ github.event.release.tag_name }} # get tag name, like: `v1.2.3`
          version=${tag:1} # drop `v` prefix, like `1.2.3`
          contains=$(grep "ThisBuild / version := \"$version\"" version.sbt)
          if [[ ! $contains ]]
          then
            echo 'FAIL - version in "tag" (${tag}) is different than one in "version.sbt" file'
            exit 1
          fi

      - uses: coursier/cache-action@v6

      - name: setup Java and SBT
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'oracle'
          cache: 'sbt'

#      - name: check, test and package
#        run: sbt "clean; +check; +all test package"
#
#      - name: setup JFrog CLI
#        uses: jfrog/setup-jfrog-cli@v4
#        env:
#          JF_URL: ${{ secrets.JFROG_URL }}
#          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
#
#      - name: upload artifacts
#        shell: bash
#        run: |
#          company=$(sbt organization)
#          org="${organization//.//}"
#          sbt "+all package packageDoc packageSrc makePom"
##          jfrog rt upload --regexp "target/scala-2.13/(*)_2.13-(*).jar" "maven-local-releases/com/evolution/{1}_2.13/$VERSION/"
##          jfrog rt upload --regexp "target/scala-2.13/(*)_2.13-(*).pom" "maven-local-releases/com/evolution/{1}_2.13/$VERSION/"
##          jfrog rt upload --regexp "target/scala-3.3.0/(*)_3-(*).jar" "maven-local-releases/com/evolution/{1}_3/$VERSION/"
##          jfrog rt upload --regexp "target/scala-3.3.0/(*)_3-(*).pom" "maven-local-releases/com/evolution/{1}_3/$VERSION/"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history for all branches and tags
      - run: |
          git status
          git remote
          git remote show origin
          git symbolic-ref refs/remotes/origin/HEAD
          main=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
#          git fetch origin $main --depth 1
#          git checkout origin/$main

          $(git branch $main remotes/origin/$main)

      - name: prepare for next version
        run: |
          tag=${{ github.event.release.tag_name }} # get tag name, like: `v1.2.3`
          version=${tag:1} # drop `v` prefix, like `1.2.3`
          current=$( echo $version |grep -Eo '[0-9]+$' ) # last number in version, like `3`
          next=$((current+1)) # increase last number, like `4`
          prefix=$(echo ${version:0:-${#current}}) # extract prefix, like `1.2.`
          nextVersion="$prefix$next-SNAPSHOT"
          echo -e "ThisBuild / version := \"$nextVersion\"\n" > version.sbt
          # or `github-actions[bot]` as on https://github.com/actions/checkout#push-a-commit-using-the-built-in-token
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git commit -m "prepare for next version: $nextVersion"
          git push

      - name: kill workflow
        if: always()
        run: exit 1

      - name: delete tag
        if: failure()
        run: git push --delete origin ${{ github.ref_name }}
